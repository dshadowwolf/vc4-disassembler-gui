######################################################################
# This work is covered by the following variation of the WTFPL:
#
#             DO WHAT YOU WANT TO PUBLIC LICENSE
#                     Version 1, December 2012
#
#  Copyright (C) 2012 The contributors.
#
#  Everyone is permitted to copy and distribute verbatim or modified
#  copies of this license document, and changing it is allowed as long
#  as the name is changed.
#
#             DO WHAT YOU WANT TO PUBLIC LICENSE
#    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#   0. You just DO WHAT YOU WANT TO.
#
######################################################################
#
# Arch Instruction bits file for VideoCore IV
# NOTE: This is in a very early state and is of limited accuracy.
# Mnemonics wont match official VideoCore IV due to this being an independent work.
#
# History:
# Date          Author           Comment
# ??/??/2013    hhh              Filled out undefined instructions and added 48 bit jump and branch instructions
# 15/07/2013    hhh              Updated with latest understanding & corrections
# 03/12/2012    hhh              Getting ready for all the Vector instructions
# 19/11/2012    hhh              "Test" is a prefix on instructions meaning experimental decoding attempts.
# 16/07/2012    hhh              Initial check in, the 32 bit long instructions are in a state of flux - dont trust :)
#
# This is a bitstream specification for the arch tool chain.
#
# This format is due to change soon so don't rely on it too much, in particular:
#
#   Left hand side will support <name>:<length> notation like s:4
#   Right hand side will switch to a symbolic focus. 

# Format Explanation:
# 
# A file consists of many lines of:
#   <bit-match> {<quoted-string>}
# 
# <bit-match> ::= {<digit>|<letter>}
#
# In this particular arch file we have:
# 
#   0 1 - ? !    match a zero, one, any, any but warn not zero, any but warn if not one
#   a b d s      bits for a register reference
#   c            bits for condition codes
#   w            width of memory access
#   i            signed integer immediate
#   o            signed offset
#   u            unsigned integer immediate
#   n            number of registers 
#   p q f v      integer, float, vector opcode
#   x y z        unknown quantities
#
#   g h 
#   G H K        vector autoincrement
#
# Unused:
#
#   eghjklmrtXYZ
#
#  In general a bit-match (or left-hand-side) is bound against the incoming bitstream.
#  The quoted-string (or right-hand-sides) are emitted with the bound items resolved.

# Signed Quantities
#   i Signed immediate
#   o Signed offset
(define-signed i)
(define-signed o)

# Instruction Encodings
#   16 bit: short0
#   32 bit: short0 short1
#   48 bit: short0 short2 short1

# Condition Code 
(define-table c ["eq", "ne", "cs/lo", "cc/hs", "mi", "pl", "vs", "vc", "hi", "ls", "ge", "lt", "gt", "le", "", "f"])
(define-table C [".eq", ".ne", ".cs/lo", ".cc/hs", ".mi", ".pl", ".vs", ".vc", ".hi", ".ls", ".ge", ".lt", ".gt", ".le", "", ".f"])

# Common Operations
(define-table q ["mov", "add", "mul", "sub", "not", "cmp", "btest", "bmask", "bitset", "bitclear", "bitflip", "addscale8", "signext", "lsr", "shl", "asr"])

# All operations
(define-table p ["mov", "cmn", "add", "bic", "mul", "eor", "sub", "and", "not", "ror", "cmp", "rsub", "btest", "or", "bmask", "max", "bitset", "min", "bitclear", "addscale2", "bitflip", "addscale4", "addscale8", "addscale16", "signext", "neg", "lsr", "msb", "shl", "bitrev", "asr", "abs"])

# Floating point
(define-table f ["fadd", "fsub", "fmul", "fdiv", "fcmp", "fabs", "frsub", "fmax", "frcp", "frsqrt", "fnmul", "fmin", "fceil", "ffloor", "flog2", "fexp2"])

# Width of Memory Operation   
#   00 Long/Word  (32 bits)
#   01 Half Word  (16 bits)
#   10 Byte       (8 bits)
#   11 Signed Half (16 bits)
(define-table w ["", "h", "b", "sh"])

#
# 16 bit instructions
#

(set-byte-order 1 0)

0000 0000 0000 0000                                               "; bkpt"    # provisional: raises exception 0x0e

0000 0000 0000 0001                                               "; nop"

0000 0000 0000 0010                                               "; sleep"   # provisional
0000 0000 0000 0011                                               "; user"    # provisional: enter user mode (set bit 31 of SR)

0000 0000 0000 0100                                               "; ei"      # provisional: set bit 30 / enable interrupts
0000 0000 0000 0101                                               "; di"      # provisional: clear bit 30 / disable interrupts

0000 0000 0000 0110                                               "; cbclr"     # clear SR[5:4] = 00
0000 0000 0000 0111                                               "; cbadd1"    # add 1 to SR[5:4]
0000 0000 0000 1000                                               "; cbadd2"    # add 2 to SR[5:4]
0000 0000 0000 1001                                               "; cbadd3"    # add 3 to SR[5:4]

0000 0000 0000 1010                                               "; rti"      # pops sr and pc off stack

0000 0000 0000 1011                                               "; undefined 0x000b"  # raise exception 03
0000 0000 0000 1100                                               "; undefined 0x000c"  # raise exception 03
0000 0000 0000 1101                                               "; undefined 0x000d"  # raise exception 03
0000 0000 0000 1110                                               "; undefined 0x000e"  # raise exception 03
0000 0000 0000 1111                                               "; undefined 0x000f"  # raise exception 03

0000 0000 0001 xxxx                                               "; undefined 0x%04x{0x0010+x}"  # raise exception 03

0000 0000 001d dddd                                               "; swi r%i{d}"  # raise exception 0x20+rd&31

0000 0000 010d dddd                                               "; b r%i{d}"
0000 0000 011d dddd                                               "; bl r%i{d}"

# Table/Switch instructions
# branch using indirect byte displacement  b *(pc+rd)
0000 0000 100d dddd                                               "; switch.b r%i{d}" #, [0x%x{2+$+f*2}, 0x%x{2+$+e*2}, 0x%x{2+$+b*2}, 0x%x{2+$+a*2}, ...]"
# branch using indirect short displacement b *(pc+rd*2)
0000 0000 101d dddd                                               "; switch r%i{d}" #, [0x%x{2+$+b*2}, 0x%x{2+$+a*2}, ...]"

0000 0000 110d dddd                                               "; unknown_0x%04x{0x00c0+d} ; mov unknown_reg, r%i{d}"
0000 0000 111d dddd                                               "; version r%i{d}"

0000 0001 00xx xxxx                                               "; undefined 0x%04x{0x0100+x}" # raise exception 0x03

0000 0001 010d dddd                                               "; unknown_0x%04x{0x0140+d} ; r%i{d}"
0000 0001 011d dddd                                               "; unknown_0x%04x{0x0160+d} ; r%i{d}"
0000 0001 10dd dddd                                               "; unknown_0x%04x{0x0180+d} ; r%i{d}"

0000 0001 11uu uuuu                                               "; swi 0x%02x{u}"   # raise exception 0x20+u&31

# Push/Pop bits multiple register case for bank 1
0000 0010 101n nnnn                                               "; stm r6-r%d{6+n}, (--sp)"
0000 0010 001n nnnn                                               "; ldm r6-r%d{6+n}, (sp++)"
0000 0011 101n nnnn                                               "; stm r6-r%d{6+n}, lr, (--sp)"
0000 0011 001n nnnn                                               "; ldm r6-r%d{6+n}, pc, (sp++)"

# Push/Pop bits general case
0000 0010 1bbn nnnn                                               "; stm r%d{b*8}-r%d{(n+b*8)&31}, (--sp)"
0000 0010 0bbn nnnn                                               "; ldm r%d{b*8}-r%d{(n+b*8)&31}, (sp++)"
0000 0011 1bbn nnnn                                               "; stm r%d{b*8}-r%d{(n+b*8)&31}, lr, (--sp)"
0000 0011 0bbn nnnn                                               "; ldm r%d{b*8}-r%d{(n+b*8)&31}, pc, (sp++)"

0000 010u uuuu dddd                                               "; ld r%i{d}, (sp+0x%02x{u*4})"
0000 011u uuuu dddd                                               "; st r%i{d}, (sp+0x%02x{u*4})"

0000 1ww0 ssss dddd                                               "; ld%s{w} r%i{d}, (r%i{s})"
0000 1ww1 ssss dddd                                               "; st%s{w} r%i{d}, (r%i{s})"
 
0001 0ooo ooo1 1001                                               "; add sp, 0x%x{o*4}"
0001 0ooo oood dddd                                               "; add r%i{d}, sp, 0x%x{o*4}"
 
0001 1ccc cooo oooo                                               "; b%s{c} 0x%08x{$+o*2}"

0010 uuuu ssss dddd                                               "; ld r%i{d}, (r%i{s}+0x%02x{u*4})"
0011 uuuu ssss dddd                                               "; st r%i{d}, (r%i{s}+0x%02x{u*4})"

# Arithmetic and Logical Operations

# op rd, ra   (rd = rd op ra)
0101 0011 ssss dddd                                               "; addscale r%i{d}, r%i{s} << 1"
0101 0101 ssss dddd                                               "; addscale r%i{d}, r%i{s} << 2"
0101 0110 ssss dddd                                               "; addscale r%i{d}, r%i{s} << 3"
0101 0111 ssss dddd                                               "; addscale r%i{d}, r%i{s} << 4"
010p pppp ssss dddd                                               "; %s{p} r%i{d}, r%i{s}"

# op rd, #u   (rd = rd op #u)
0111 011u uuuu dddd                                               "; addscale r%i{d}, %i{u} << 8"
011q qqqu uuuu dddd                                               "; %s{q} r%i{d}, %i{u}"

#
# 32 bit instructions
#
(set-byte-order 1 0 3 2)

1000 cccc aaaa dddd 00ss ssoo oooo oooo                           "; addcmpb%s{c} r%i{d}, r%i{a}, r%i{s}, 0x%08x{$+o*2}"
1000 cccc iiii dddd 01ss ssoo oooo oooo                           "; addcmpb%s{c} r%i{d}, %i{i}, r%i{s}, 0x%08x{$+o*2}"
1000 cccc aaaa dddd 10uu uuuu oooo oooo                           "; addcmpb%s{c} r%i{d}, r%i{a}, %i{u}, 0x%08x{$+o*2}"
1000 cccc iiii dddd 11uu uuuu oooo oooo                           "; addcmpb%s{c} r%i{d}, %i{i}, %i{u}, 0x%08x{$+o*2}"

1001 cccc 0ooo oooo oooo oooo oooo oooo                           "; b%s{c} 0x%08x{$+o*2}"
1001 oooo 1ooo oooo oooo oooo oooo oooo                           "; bl 0x%08x{$+o*2}"

# Conditional Ld/St with (ra, rb)
1010 0000 ww0d dddd aaaa aCCC C00b bbbb                           "; ld%s{w}%s{C} r%i{d}, (r%i{a}+r%i{b})" #todo rb<<size
1010 0000 ww1d dddd aaaa aCCC C00b bbbb                           "; st%s{w}%s{C} r%i{d}, (r%i{a}+r%i{b})" #todo rb<<size
1010 0000 xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xa0000000+x}" # raises exception 0x03

1010 0001 xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xa1000000+x}" # raises exception 0x03

# Non conditional
1010 001o ww0d dddd ssss sooo oooo oooo                           "; ld%s{w} r%i{d}, (r%i{s}+0x%x{o})"
1010 001o ww1d dddd ssss sooo oooo oooo                           "; st%s{w} r%i{d}, (r%i{s}+0x%x{o})"

# Conditional Ld/St with Post increment/decrement
1010 0100 ww0d dddd ssss sCCC C000 0000                           "; ld%s{w}%s{C} r%i{d}, (--r%i{s})"
1010 0100 ww1d dddd ssss sCCC C000 0000                           "; st%s{w}%s{C} r%i{d}, (--r%i{s})" 
1010 0101 ww0d dddd ssss sCCC C000 0000                           "; ld%s{w}%s{C} r%i{d}, (r%i{s}++)"
1010 0101 ww1d dddd ssss sCCC C000 0000                           "; st%s{w}%s{C} r%i{d}, (r%i{s}++)" 
1010 01xx xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xa4000000+x}" # raises exception 0x03

# 1010 10.. Ld/st with 16 bit offset
1010 1000 ww0d dddd oooo oooo oooo oooo                           "; ld%s{w} r%i{d}, (r24+0x%0x{o})"
1010 1000 ww1d dddd oooo oooo oooo oooo                           "; st%s{w} r%i{d}, (r24+0x%0x{o})"
1010 1001 ww0d dddd oooo oooo oooo oooo                           "; ld%s{w} r%i{d}, (sp+0x%0x{o})"
1010 1001 ww1d dddd oooo oooo oooo oooo                           "; st%s{w} r%i{d}, (sp+0x%0x{o})"
1010 1010 ww0d dddd oooo oooo oooo oooo                           "; ld%s{w} r%i{d}, (pc+0x%0x{o})"
1010 1010 ww1d dddd oooo oooo oooo oooo                           "; st%s{w} r%i{d}, (pc+0x%0x{o})"
1010 1011 ww0d dddd oooo oooo oooo oooo                           "; ld%s{w} r%i{d}, (r0+0x%0x{o})"
1010 1011 ww1d dddd oooo oooo oooo oooo                           "; st%s{w} r%i{d}, (r0+0x%0x{o})"

1010 11xx xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xac000000+x}" # raises exception 0x03

1011 0010 011d dddd iiii iiii iiii iiii                           "; addscale r%i{d}, 0x%04x{i} << 1"
1011 0010 101d dddd iiii iiii iiii iiii                           "; addscale r%i{d}, 0x%04x{i} << 2"
1011 0010 110d dddd iiii iiii iiii iiii                           "; addscale r%i{d}, 0x%04x{i} << 3"
1011 0010 111d dddd iiii iiii iiii iiii                           "; addscale r%i{d}, 0x%04x{i} << 4"
1011 00pp pppd dddd iiii iiii iiii iiii                           "; %s{p} r%i{d}, 0x%04x{i}"

1011 01ss sssd dddd iiii iiii iiii iiii                           "; add r%i{d}, r%i{s}, 0x%04x{i}"

1011 10xx xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xb8000000+x}" # raises exception 0x03

1011 1111 111d dddd oooo oooo oooo oooo                           "; add r%i{d}, pc, 0x%08x{o} ; 0x%08x{$+o}"
1011 11xx xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xbc000000+x}" # raises exception 0x03

# 32 bit triadic instructions
1100 0010 011d dddd aaaa aCCC C00b bbbb                           "; addscale%s{C} r%i{d}, r%i{a}, r%i{b} << 1"
1100 0010 101d dddd aaaa aCCC C00b bbbb                           "; addscale%s{C} r%i{d}, r%i{a}, r%i{b} << 2"
1100 0010 110d dddd aaaa aCCC C00b bbbb                           "; addscale%s{C} r%i{d}, r%i{a}, r%i{b} << 3"
1100 0010 111d dddd aaaa aCCC C00b bbbb                           "; addscale%s{C} r%i{d}, r%i{a}, r%i{b} << 4"
1100 00pp pppd dddd aaaa aCCC C00b bbbb                           "; %s{p}%s{C} r%i{d}, r%i{a}, r%i{b}"

1100 0010 011d dddd aaaa aCCC C1ii iiii                           "; addscale%s{C} r%i{d}, r%i{a}, %i{i} << 1"
1100 0010 100d dddd aaaa aCCC C1ii iiii                           "; addscale%s{C} r%i{d}, r%i{a}, %i{i} << 2"
1100 0010 110d dddd aaaa aCCC C1ii iiii                           "; addscale%s{C} r%i{d}, r%i{a}, %i{i} << 3"
1100 0010 111d dddd aaaa aCCC C1ii iiii                           "; addscale%s{C} r%i{d}, r%i{a}, %i{i} << 4"
1100 00pp pppd dddd aaaa aCCC C1ii iiii                           "; %s{p}%s{C} r%i{d}, r%i{a}, %i{i}"

1100 0100 000d dddd aaaa aCCC C00b bbbb                           "; mulhd.ss%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0100 001d dddd aaaa aCCC C00b bbbb                           "; mulhd.su%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0100 010d dddd aaaa aCCC C00b bbbb                           "; mulhd.us%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0100 011d dddd aaaa aCCC C00b bbbb                           "; mulhd.uu%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0100 000d dddd aaaa aCCC C1ii iiii                           "; mulhd.ss%s{C} r%i{d}, r%i{a}, %d{i}"
1100 0100 001d dddd aaaa aCCC C1ii iiii                           "; mulhd.su%s{C} r%i{d}, r%i{a}, %d{i}"
1100 0100 010d dddd aaaa aCCC C1ii iiii                           "; mulhd.us%s{C} r%i{d}, r%i{a}, %d{i}"
1100 0100 011d dddd aaaa aCCC C1ii iiii                           "; mulhd.uu%s{C} r%i{d}, r%i{a}, %d{i}"

1100 0100 100d dddd aaaa aCCC C00b bbbb                           "; div.ss%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0100 101d dddd aaaa aCCC C00b bbbb                           "; div.su%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0100 110d dddd aaaa aCCC C00b bbbb                           "; div.us%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0100 111d dddd aaaa aCCC C00b bbbb                           "; div.uu%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0100 100d dddd aaaa aCCC C1ii iiii                           "; div.ss%s{C} r%i{d}, r%i{a}, %d{i}"
1100 0100 101d dddd aaaa aCCC C1ii iiii                           "; div.su%s{C} r%i{d}, r%i{a}, %d{i}"
1100 0100 110d dddd aaaa aCCC C1ii iiii                           "; div.us%s{C} r%i{d}, r%i{a}, %d{i}"
1100 0100 111d dddd aaaa aCCC C1ii iiii                           "; div.uu%s{C} r%i{d}, r%i{a}, %d{i}"

1100 0101 000d dddd aaaa aCCC C00b bbbb                           "; adds%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0101 000d dddd aaaa aCCC C1ii iiii                           "; adds%s{C} r%i{d}, r%i{a}, %d{i}"
1100 0101 001d dddd aaaa aCCC C00b bbbb                           "; subs%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0101 001d dddd aaaa aCCC C1ii iiii                           "; subs%s{C} r%i{d}, r%i{a}, %d{i}"
1100 0101 010d dddd aaaa aCCC C00b bbbb                           "; shls%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0101 010d dddd aaaa aCCC C1ii iiii                           "; shls%s{C} r%i{d}, r%i{a}, %d{i}"
1100 0101 011d dddd aaaa aCCC C00b bbbb                           "; clipsh%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0101 011d dddd aaaa aCCC C1ii iiii                           "; clipsh%s{C} r%i{d}, r%i{a}, %d{i}"
1100 0101 1xxd dddd aaaa aCCC C00b bbbb                           "; addscale%s{C} r%i{d}, r%i{a}, r%i{b} << %d{x+5}"
1100 0101 1xxd dddd aaaa aCCC C1ii iiii                           "; addscale%s{C} r%i{d}, r%i{a}, %d{i} << %d{x+5}"

1100 0110 000d dddd aaaa aCCC C00b bbbb                           "; count%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 0110 000d dddd aaaa aCCC C1ii iiii                           "; count%s{C} r%i{d}, r%i{a}, %d{b}"
1100 0110 xxxd dddd aaaa aCCC C00b bbbb                           "; subscale%s{C} r%i{d}, r%i{a}, r%i{b} << %d{x}"
1100 0110 xxxd dddd aaaa aCCC C1ii iiii                           "; subscale%s{C} r%i{d}, r%i{a}, %d{i} << %d{x}"
1100 0111 000d dddd aaaa aCCC C00b bbbb                           "; subscale%s{C} r%i{d}, r%i{a}, r%i{b} << 8"
1100 0111 000d dddd aaaa aCCC C1ii iiii                           "; subscale%s{C} r%i{d}, r%i{a}, %d{i} << 8"

1100 0111 xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xc7000000+x}" # raises exception 0x03

# floating poing triadic
1100 100f fffd dddd aaaa aCCC C00b bbbb                           "; %s{f}%s{C} r%i{d}, r%i{a}, r%i{b}"
1100 100f fffd dddd aaaa aCCC C1ii iiii                           "; %s{f}%s{C} r%i{d}, r%i{a}, %i{i}"

# Float to Int (sals means signed arithmetic shift left, ie shift by a negative number goes right)
1100 1010 000d dddd aaaa aCCC C00b bbbb                           "; ftrunc%s{C} r%i{d}, r%i{a}, sasl r%i{b}"
1100 1010 000d dddd aaaa aCCC C100 0000                           "; ftrunc%s{C} r%i{d}, r%i{a}"
1100 1010 000d dddd aaaa aCCC C1ii iiii                           "; ftrunc%s{C} r%i{d}, r%i{a}, sasl %i{i}"
1100 1010 001d dddd aaaa aCCC C00b bbbb                           "; floor%s{C} r%i{d}, r%i{a}, sasl r%i{b}"
1100 1010 001d dddd aaaa aCCC C100 0000                           "; floor%s{C} r%i{d}, r%i{a}"
1100 1010 001d dddd aaaa aCCC C1ii iiii                           "; floor%s{C} r%i{d}, r%i{a}, sasl %i{i}"

# Int to Float (sasr means signed arithmetic shift right, ie shift by a negative number goes left)
1100 1010 010d dddd aaaa aCCC C00b bbbb                           "; flts%s{C} r%i{d}, r%i{a}, sasr r%i{b}"
1100 1010 010d dddd aaaa aCCC C100 0000                           "; flts%s{C} r%i{d}, r%i{a}"
1100 1010 010d dddd aaaa aCCC C1ii iiii                           "; flts%s{C} r%i{d}, r%i{a}, sasr %i{i}"
1100 1010 011d dddd aaaa aCCC C10b bbbb                           "; fltu%s{C} r%i{d}, r%i{a}, sasr r%i{b}"
1100 1010 011d dddd aaaa aCCC C100 0000                           "; fltu%s{C} r%i{d}, r%i{a}"
1100 1010 011d dddd aaaa aCCC C1ii iiii                           "; fltu%s{C} r%i{d}, r%i{a}, sasr %i{i}"

1100 1010 1xxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xca800000+x}" # raises exception 0x03

1100 1011 xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xcb000000+x}" # raises exception 0x03

1100 1100 000d dddd 0000 0000 000a aaaa                           "; mov p%d{d}, r%d{a}"
1100 1100 001d dddd 0000 0000 000a aaaa                           "; mov r%d{d}, p%d{a}"

1100 1100 00xx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xcc000000+x}" # raises exception 0x03
1100 1100 01xx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xcc400000+x}" # raises exception 0x03

1100 1100 1xxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xcc800000+x}" # raises exception 0x03

1100 1101 xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xcd000000+x}" # raises exception 0x03
1100 1110 xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xce000000+x}" # raises exception 0x03
1100 1111 xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xcf000000+x}" # raises exception 0x03

1101 xxxx xxxx xxxx xxxx xxxx xxxx xxxx                           "; undefined 0x%08x{0xd0000000+x}" # raises exception 0x03


#
# 48 bit instruction words
#
(set-byte-order 1 0 5 4 3 2)

1110 0000 0000 0000 uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; j 0x%08x{u}"
1110 0001 0000 0000 oooo oooo oooo oooo oooo oooo oooo oooo       "; b 0x%08x{$+o}"
1110 0010 0000 0000 uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; jl 0x%08x{u}"
1110 0011 0000 0000 oooo oooo oooo oooo oooo oooo oooo oooo       "; bl 0x%08x{$+o}"
1110 00xx xxxx xxxx yyyy yyyy yyyy yyyy yyyy yyyy yyyy yyyy       "; unknown_0x%04x{0xe000+x}%08x{y}"

1110 0100 xxxx xxxx yyyy yyyy yyyy yyyy yyyy yyyy yyyy yyyy       "; undefined 0x%04x{0xe400+x}%08x{y}" # raises exception 0x03

1110 0101 000d dddd oooo oooo oooo oooo oooo oooo oooo oooo       "; add r%i{d}, pc, 0x%08x{o} ; 0x%08x{$+o}"

1110 0101 xxxx xxxx yyyy yyyy yyyy yyyy yyyy yyyy yyyy yyyy       "; undefined 0x%04x{0xe500+x}%08x{y}" # raises exception 0x03

1110 0110 ww0d dddd ssss sooo oooo oooo oooo oooo oooo oooo       "; ld%s{w} r%i{d}, (r%i{s}+0x%08x{o})"
1110 0110 ww1d dddd ssss sooo oooo oooo oooo oooo oooo oooo       "; st%s{w} r%i{d}, (r%i{s}+0x%08x{o})"

1110 0111 ww0d dddd 1111 1ooo oooo oooo oooo oooo oooo oooo       "; ld%s{w} r%i{d}, (pc+0x%08x{o}) ; 0x%08x{$+o}"
1110 0111 ww1d dddd 1111 1ooo oooo oooo oooo oooo oooo oooo       "; st%s{w} r%i{d}, (pc+0x%08x{o}) ; 0x%08x{$+o}"

1110 0111 xxxx xxxx yyyy yyyy yyyy yyyy yyyy yyyy yyyy yyyy       "; undefined 0x%04x{0xe700+x}%08{y}" # raises exception 0x03

1110 1010 011d dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; addscale r%i{d}, 0x%08x{u} << 1"
1110 1010 100d dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; addscale r%i{d}, 0x%08x{u} << 2"
1110 1010 110d dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; addscale r%i{d}, 0x%08x{u} << 3"
1110 1010 111d dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; addscale r%i{d}, 0x%08x{u} << 4"
1110 10pp pppd dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; %s{p} r%i{d}, 0x%08x{u}"

1110 11ss sssd dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; add r%i{d}, r%i{s}, 0x%08x{u}"


# Experimental Vector Instruction Decoding
#
# The Vector Register File (VRF) is an 2d array P(64,64) of 8 bit quantities.
#
#  P(y,x) is a reference to an single 8 bit value.
#  PX(y,x) is a reference to a 16 bit value made from two 8 bit cells: P(y,x)+(P(y,x+16)<<8)
#  PY(y,x) is a reference to a 32 bit value made from four 8 bit cells: P(y,x)+(P(y,x+16)<<8)+(P(y,x+32)<<16)+(P(y,x+48)<<24)
#
#  R(y,x) a vector register is a reference to 16 adjacent horizontal or vertical values from P().
#  H(y,x), HX(y,x) or HY(y,x) are horizontal 8, 16, or 32 bit vectors.
#  V(y,x), VX(y,x) or HY(y,x) are vertical 8, 16 or 32 bit vectors.
#
#  16 x 8 bit vectors:
#    H(y, x)  = [ P(y,x),  P(y,x+1),  ..., P(y,x+15)  ]
#    V(y, x)  = [ P(y,x),  P(y+1,x),  ..., P(y+15,x)  ]
#
#  16 x 16 bit vectors:
#    HX(y, x) = [ PX(y,x), PX(y,x+1), ..., PX(y,x+15) ]
#    VX(y, x) = [ PX(y,x), PX(y+1,x), ..., PX(y+15,x) ]
#
#  16 x 32 bit vectors:
#    HY(y, x) = [ PY(y,x), PY(y,x+1), ..., PY(y,x+15) ]
#    VY(y, x) = [ PY(y,x), PY(y+1,x), ..., PY(y+15,x) ]
#
#  Vector Addressing:
#
#    v<op> D, A, B                        D := A op B
#
#   where D, A, B are vectors with the following forms:
#
#    R(yd, xd)                          Refer to a simple vector at (yd, xd).
#    R(yd++, xd)                        Step in the indicated direction for each repeated execution.
#    R(yd, xd++)                        Step in the indicated direction for each repeated execution.
#    R(yd, xd)+rs                       Use scalar register contents <y:6 x:6> to offset (yd, xd).
#    R(yd++, xd)+rs                     Increment addressing with scalar offset.
#    R(yd, xd++)+rs                     Increment addressing with scalar offset.
#    rs                                 Use a scalar register contents as a constant for all lanes (B only).
#    rs+#s9                             Use a scalar register contents + signed 9 bit quantity (B only).
#    s16                                Use a immediate value (B only).
#    -                                  Discard result (D), Ignore (A), Use coordinate as Scalar (B).
#
#   and R is from: V, VX, VY, H, HX, HY
#

(define-table D ["H8(y,0)", "V8(0,0+x)", "H8(y,16)", "V8(y,16)", "H8(y,32)", "V8(0,32+x)", "H8(y,48)", "V8(0,48+x)", "H16(0+y,0)", "V16(0,0+x)", "H16(y,32)", "V16(y,32+x)", "H32(y,0)", "V32(0,0+x)", "-", "-d??"])
(define-table A ["H8(y,0)", "V8(y,0)", "H8(y,16)", "V8(y,16)", "H8(y,32)", "V8(y,32)", "H8(y,48)", "V8(y,48)", "H16(0+y,0)", "V16(0,0+x)", "H16(y,32)", "V16(y,32+x)", "H32(y,0)", "V32(0,0+x)", "-", "-a??"])
(define-table B ["H8(y,0)", "V8(y,0)", "H8(y,16)", "V8(y,16)", "H8(y,32)", "V8(y,32)", "H8(y,48)", "V8(y,48)", "H16(0+y,0)", "V16(0,0+x)", "H16(y,32)", "V16(y,32+x)", "H32(y,0)", "V32(0,0+x)", "-", "-b??"])

(define-table V ["H8(y,0)", "H8(y,16)", "H8(y,32)", "H8(y,48)", "H16(0+y,0)", "H16(y,32)", "H32(y,0)", "-"])
(define-table T ["H8(y,0)", "H8(y,16)", "H8(y,32)", "H8(y,48)", "H16(0+y,0)", "H16(y,32)", "H32(y,0)", "-"])
(define-table U ["H8(y,0)", "H8(y,16)", "H8(y,32)", "H8(y,48)", "H16(0+y,0)", "H16(y,32)", "H32(y,0)", "-"])
(define-table Z ["V8(y,0)", "V8(y,16)", "V8(y,32)", "V8(y,48)", "V16(0+y,0)", "V16(y,32)", "V32(y,0)", "-"])
(define-table X ["V8(y,0)", "V8(y,16)", "V8(y,32)", "V8(y,48)", "V16(0+y,0)", "V16(y,32)", "V32(y,0)", "-"])
(define-table Y ["V8(y,0)", "V8(y,16)", "V8(y,32)", "V8(y,48)", "V16(0+y,0)", "V16(y,32)", "V32(y,0)", "-"])

(define-table g ["+r0", "+r1", "+r2", "+r3", "+r4", "+r5", "+r6", "+r7", "+r8", "+r9", "+r10", "+r11", "+r12", "+r13", "+r14", ""])
(define-table G ["", "*", "++ ", "*++ "])

(define-table h ["+r0", "+r1", "+r2", "+r3", "+r4", "+r5", "+r6", "+r7", "+r8", "+r9", "+r10", "+r11", "+r12", "+r13", "+r14", ""])
(define-table H ["", "*", "++ ", "*++ "])

(define-table k ["+r0", "+r1", "+r2", "+r3", "+r4", "+r5", "+r6", "+r7", "+r8", "+r9", "+r10", "+r11", "+r12", "+r13", "+r14", ""])
(define-table K ["", "*", "++ ", "*++ "])

# The Accumulator (ACC) is a additional 16 element vector register contained in the Vector ALU.  Arithmetic on the
# Accumulator occurs using saturating signed 16 bit arithmetic.
#
# Instruction Modifiers:
#
#  Instruction modifiers change the behavior of instructions, allowing repetition, predicated update of vector elements,
#  accumulation, and update of a scalar register and condition flags.
# 
# <modifier> = [<rep>] [<flag>] [<acc>] [<src>]
#  <rep>   = [REP2 | REP4 | REP8 | REP16 | REP32 | REP64 | REP r0]
#  <flag>  = [IFZ | IFNZ | IFN | IFNN | IFC | IFNC] [SETF]
#  <acc>   = [CLRA] [ACC]
#  <sru>   = [SUMU|SUMS|IMIN|IMAX|MAX] (r0|r1|r2|r3|r4|r5|r6|r7)

#  The <rep> modifier causes an instruction to be repeated 1, 2, 4, 8, 16, 32, 64 or until the scalar status register sr negative
#  flag n is cleared.  Instructions will always execute at least once.
(define-table R ["", " REP2", " REP4", " REP8", " REP16", " REP32", " REP64", " REP r0"])

#  The <pred> modifier selects which vector lanes should write back their result and whether each lane should update its
#  Zero, Negative and Carry flags at the end of the operation. There are 16 sets of flags corresponding to the width
#  of the ALU.
(define-table P ["", " NV", " IFZ", " IFNZ", " IFN", " IFNN", " IFC", " IFNC"])
(define-table F ["", " SETF"]

# Operation Size
(define-table L ["16", "32"])

# Operation Width (memory transfer)
(define-table W ["8", "16", "32", "<width-unknown>")

(define-table e ["+r0", "+r1", "+r2", "+r3", "+r4", "+r5", "+r6", "+r7"])

#
#  The <acc> modifier controls updates to the accumulator. If CLRA is set then the accumulator will be cleared on the 
#  execution of the instruction but on repetitions it is ignored.  When ACC is set the Accumulator is incremented by
#  the result of the current calculation before the sum) is written back to the destination vector register.
#
#  The <sru> modifier may be used to result back to one of the scalar registers on each repetition.  The scalar unit, N and
#  Z flags are also updated. PPU0 writes back the result of element 0, SUM writes back the result of summing all active elements,
#  whilst IMIN and IMAX write back the index of the minimum or maximum element (or -1 if all elements disabled by predication)

# Load and Store instructions:
#
#  The instructions transfer 16 element registers between the Vector Register File (VRF) and main memory.
#  To avoid cache pollution, the data accesses bypass the L1 cache.
#
#   vld R(yd,xd)[+rd], (rb[+offset][+=ra]) [<modifier>]
#   vst R(ya,ya)[+ra], (rb[+offset][+=rd]) [<modifier>]
#
# Vector Arithmetic/Logical Instructions:
#
#   vop vd, va, vb <modifiers>

(define-table v ["mov","bitplanes","even","odd", "interl","interh","brev","ror", "shl","shls","lsr","asr", "signshl","op13","signasl","signasls", "and","or","eor","bic", "count","msb","op22","op23", "min","max","dist","dists", "clip","sign","clips","testmag", "add","adds","addc","addsc", "sub","subs","subc","subsc", "rsub","rsubs","rsubc","rsubsc", "op44","op45","op46","op47", "mull","mulls","mulm","mulms", "mulhd.ss","mulhd.su","mulhd.us","mulhd.uu", "mulhn.ss","mulhn.su","mulhn.us","mulhn.uu", "mulht.ss","mulht.su","op62","op63"])

# Vector Load, Store and other Memory Instructions

(define-table M ["ld", "lookupm", "lookupml", "mem03", "st", "indexwritem", "indexwriteml", "mem07", "memread", "memwrite", "mem10", "mem11", "mem12", "mem13", "mem14", "mem15", "mem16", "mem17", "mem18", "mem19", "mem20", "mem21", "mem22", "mem23", "getacc", "mem25", "mem26", "mem27", "mem28", "mem29", "mem30", "mem31"])

# Accumulator or scalar register update
# ACC: 0-- ---- (0x00)
#
#      32 0x20 10 0000  UADD
#      33 0x21 10 0001  USUA
#      34 0x22 10 0010  UACC
#      35 0x23 10 0011  UDEC
#      36 0x24 10 0100  CLRA (UADD)
#      37 0x25 10 0101  CLRA (USUB)
#      38 0x26 10 0110  CLRA UACC
#      39 0x27 10 0111  CLRA UDEC
#      40 0x28 10 1000  SADD
#      41 0x29 10 1001  SSUB
#      42 0x2a 10 1010  SACC
#      43 0x2b 10 1011  SDEC
#      44 0x2c 10 1100  CLRA (SADD)
#      45 0x2d 10 1101  CLRA (SSUB)
#      46 0x2e 10 1110  CLRA SACC
#      47 0x2F 10 1111  CLRA SDEC
#
#      48 0x30 11 0000  UADDH
#      49 0x31 11 0001  USUBH
#      50 0x32 11 0010  UACCH
#      51 0x33 11 0011  UDECH
#      52 0x34 11 0100  CLRA (UADDH)
#      53 0x35 11 0101  CLRA (USUBH)
#      54 0x36 11 0110  CLRA UACCH
#      55 0x37 11 0111  CLRA UDECH
#      56 0x38 11 1000  SADDH
#      57 0x39 11 1001  SSUBH
#      58 0x3a 11 1010  SACCH
#      59 0x3a 11 1010  SDECH
#      60 0x3c 11 1100  CLRA (SADDH)
#      61 0x3d 11 1101  CLRA (SSUBH)
#      62 0x3e 11 1110  CLRA SACCH
#      63 0x3e 11 1111  CLRA SDECH
#
# SRU: 1-- ---- (0x40)
#
(define-table S [ "", "sru001", "sru002", "sru003", "sru004", "sru005", "(clra)", "sru007", "sru008", "sru009", "sru010", "sru011", "sru012", "sru013", "sru014", "sru015", "sru016", "sru017", "sru018", "sru019", "sru020", "sru021", "sru022", "sru023", "sru024", "sru025", "sru026", "sru027", "sru028", "sru029", "sru030", "sru031", "UADD", "USUB", "UACC", "UDEC", "CLRA", "CLRA USUB", "CLRA UACC", "CLRA UDEC", "SADD", "SSUB", "SACC", "SDEC", "CLRA SADD", "CLRA SSUB", "CLRA SACC", "CLR SDEC", "UADDH", "USUBH", "UACCH", "UDECH", "CLRA UADDH", "CLRA USUBH", "CLRA UACCH", "CLR UDECH", "SADDH", "SSUBH", "SACCH", "SDECH", "CLRA SADDH", "CLRA SSUBH", "CLRA SACCH", "CLRA SDECH", "SUMU r0", "SUMU r1", "SUMU r2", "SUMU r3", "SUMU r4", "SUMU r5", "SUMU r6", "SUMU r7", "SUMS r0", "SUMS r1", "SUMS r2", "SUMS r3", "SUMS r4", "SUMS r5", "SUMS r6", "SUMS r7", "MAX2 r0", "MAX2 r1", "MAX2 r2", "MAX2 r3", "MAX2 r4", "MAX2 r5", "MAX2 r6", "MAX2 r7", "IMIN r0", "IMIN r1", "IMIN r2", "IMIN r3", "IMIN r4", "IMIN r5", "IMIN r6", "IMIN r7", "MAX4 r0", "MAX4 r1", "MAX4 r2", "MAX4 r3", "MAX4 r4", "MAX4 r5", "MAX4 r6", "MAX4 r7", "IMAX r0", "IMAX r1", "IMAX r2", "IMAX r3", "IMAX r4", "IMAX r5", "IMAX r6", "IMAX r7", "MAX6 r0", "MAX6 r1", "MAX6 r2", "MAX6 r3", "MAX6 r4", "MAX6 r5", "MAX6 r6", "MAX6 r7", "MAX r0", "MAX r1", "MAX r2", "MAX r3", "MAX r4", "MAX r5", "MAX r6", "MAX r7"])

# 48 bit vector format
(set-byte-order 1 0 3 2 5 4)

# Vector memory ops with Horizontal Vectors
1111 00MM MMMW Weee VVV0 dddd ddTT Txaa aaaa z011 1Fbb bbbb "; v%s{W}%s{M} %s{V}%d{d}%s{e}*%d{z}, %s{T}%d{a}%s{e}*%d{x}, (r%d{b}) %s{F}"
1111 00MM MMMW Weee VVV0 dddd ddTT Txaa aaaa z0UU Uybb bbbb "; v%s{W}%s{M} %s{V}%d{d}%s{e}*%d{z}, %s{T}%d{a}%s{e}*%d{x}, %s{U}%d{b}%s{e}*%d{y}"
1111 00MM MMMW Weee VVV0 dddd ddTT Txaa aaaa z1PP PFii iiii "; v%s{W}%s{M} %s{V}%d{d}%s{e}*%d{z}, %s{T}%d{a}%s{e}*%d{x}, %d{i} %s{P}%s{F}"

# Vector memory ops with Vertical Vectors
1111 00MM MMMW Weee ZZZ1 dddd ddXX Xxaa aaaa z011 1Fbb bbbb "; v%s{W}%s{M} %s{Z}%d{d}%s{e}*%d{z}, %s{X}%d{a}%s{e}*%d{x}, (r%d{b}) %s{F}"
1111 00MM MMMW Weee ZZZ1 dddd ddXX Xxaa aaaa z0YY Yybb bbbb "; v%s{W}%s{M} %s{Z}%d{d}%s{e}*%d{z}, %s{X}%d{a}%s{e}*%d{x}, %s{Y}%d{b}%s{e}*%d{y}"
1111 00MM MMMW Weee ZZZ1 dddd ddXX Xxaa aaaa z1PP PFii iiii "; v%s{W}%s{M} %s{Z}%d{d}%s{e}*%d{z}, %s{X}%d{a}%s{e}*%d{x}, %d{i} %s{P}%s{F}"

# Vector ALU ops with Horizontal Vectors
1111 01Lv vvvv veee VVV0 dddd ddTT Txaa aaaa z011 1Fbb bbbb "; v%s{L}%s{v} %s{V}%d{d}%s{e}*%d{z}, %s{T}%d{a}%s{e}*%d{x}, r%d{b} %s{F}"
1111 01Lv vvvv veee VVV0 dddd ddTT Txaa aaaa z0UU Uybb bbbb "; v%s{L}%s{v} %s{V}%d{d}%s{e}*%d{z}, %s{T}%d{a}%s{e}*%d{x}, %s{U}%d{b}%s{e}*%d{y}"
1111 01Lv vvvv veee VVV0 dddd ddTT Txaa aaaa z1PP PFii iiii "; v%s{L}%s{v} %s{V}%d{d}%s{e}*%d{z}, %s{T}%d{a}%s{e}*%d{x}, %d{i} %s{P}%s{F}"

# Vector ALU ops with Vector Vectors
1111 01Lv vvvv veee ZZZ1 dddd ddXX Xxaa aaaa z011 1Fbb bbbb "; v%s{L}%s{v} %s{Z}%d{d}%s{e}*%d{z}, %s{X}%d{a}%s{e}*%d{x}, r%d{b} %s{F}"
1111 01Lv vvvv veee ZZZ1 dddd ddXX Xxaa aaaa z0YY Yybb bbbb "; v%s{L}%s{v} %s{Z}%d{d}%s{e}*%d{z}, %s{X}%d{a}%s{e}*%d{x}, %s{Y}%d{b}%s{e}*%d{y}"
1111 01Lv vvvv veee ZZZ1 dddd ddXX Xxaa aaaa z1PP PFii iiii "; v%s{L}%s{v} %s{Z}%d{d}%s{e}*%d{z}, %s{X}%d{a}%s{e}*%d{x}, %d{i} %s{P}%s{F}"

# 80 bit vector format
(set-byte-order 1 0 3 2 5 4 7 6 9 8)

# Vector memory ops
1111 10MM MMMW WRRR 1110 dddd ddAA AAaa aaaa F011 1bbb bbbb gggg GGhh hhHH mmmm PPPi iiii iiss ssii "; v%s{W}%s{M} -%d{d}%s{G}%s{g}, %s{A}[y=%d{a},x=%d{m}]%s{H}%s{h}, %d{(i*128)+b}(r%d{s}+=%s{g}) %s{R}%s{P}%s{F}"
1111 10MM MMMW WRRR DDDD dddd dd11 10aa aaaa F011 1bbb bbbb gggg GGhh hhHH mmmm PPPi iiii iiss ssii "; v%s{W}%s{M} %s{D}%d{d}%s{G}%s{g}, -[y=%d{a},x=%d{m}]%s{H}%s{h}, %d{(i*128)+b}(r%d{s}+=%s{h}) %s{R}%s{P}%s{F}"

1111 10MM MMMW WRRR DDDD dddd ddAA AAaa aaaa F0BB BBbb bbbb gggg GGhh hhHH mmmm PPPS SSSS SSkk kkKK "; v%s{W}%s{M} %s{D}%d{d}%s{G}%s{g}, %s{A}[y=%d{a},x=%d{m}]%s{H}%s{h}, %s{B}%d{b}%s{K}%s{k} %s{R}%s{P}%s{F} %s{S}"

1111 10MM MMMW WRRR DDDD dddd ddAA AAaa aaaa F1ll llll llll gggg GGhh hhHH mmmm PPPS SSSS SSbb bbbb "; v%s{W}%s{M} %s{D}%d{d}%s{G}%s{g}, %s{A}[y=%d{a},x=%d{m}]%s{H}%s{h}, %d{(b*1024)+l} %s{R}%s{P}%s{F} %s{S}"

# Vector ALU ops
1111 11Lv vvvv vRRR DDDD dddd ddAA AAaa aaaa F0BB BBbb bbbb gggg GGhh hhHH mmmm PPPS SSSS SSkk kkKK "; v%s{L}%s{v} %s{D}%d{d}%s{G}%s{g}, %s{A}[y=%d{a},x=%d{m}]%s{H}%s{h}, %s{B}%d{b}%s{K}%s{k} %s{R}%s{P}%s{F} %s{S}"
1111 11Lv vvvv vRRR DDDD dddd ddAA AAaa aaaa F1ll llll llll gggg GGhh hhHH mmmm PPPS SSSS SSbb bbbb "; v%s{L}%s{v} %s{D}%d{d}%s{G}%s{g}, %s{A}[y=%d{a},x=%d{m}]%s{H}%s{h}, %d{(b*1024)+l} %s{R}%s{P}%s{F} %s{S}"

# Fallback patterns

1111 1xxx xxxx xxxx yyyy yyyy yyyy yyyy yyyy yyyy yyyy yyyy zzzz zzzz zzzz zzzz zzzz zzzz zzzz zzzz    "; vector80 0x%04x{x}, 0x%08x{y}, 0x%08x{z}"
1111 0xxx xxxx xxxx yyyy yyyy yyyy yyyy yyyy yyyy yyyy yyyy       "; vector48 0x%04x{x}, 0x%08x{y}"
1110 xxxx xxxx xxxx yyyy yyyy yyyy yyyy yyyy yyyy yyyy yyyy       "; scalar48 0x%04x{x}, 0x%08x{y}"
1xxx xxxx xxxx xxxx yyyy yyyy yyyy yyyy                           "; scalar32 0x%04x{x}, 0x%08x{y}"
0xxx xxxx xxxx xxxx                                               "; scalar16 0x%04x{x}"

